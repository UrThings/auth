// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  role           String?
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]
  userInfo       UserInfo[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model UserInfo {
  id              String            @id @default(cuid())
  userId          String
  img             String?
  name            String?
  work_city       String?
  webUrl          String?
  about           String?
  work_experience Work_experience[]
  speaking        Speaking[]
  writing         Writing[]
  sideProject     SideProject[]
  education       Education[]
  contact         Contact[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkImage {
  id               String  @id @default(cuid())
  imageUrl         String?
  workExperienceId String

  workExperience Work_experience @relation(fields: [workExperienceId], references: [id], onDelete: Cascade)
}

model Work_experience {
  id         String  @id @default(cuid())
  startYear  String?
  endYear    String?
  Company    String?
  City       String?
  url        String?
  userInfoId String

  images   WorkImage[]
  userinfo UserInfo    @relation(fields: [userInfoId], references: [id], onDelete: Cascade)
}

model Writing {
  id         String   @id @default(cuid())
  userInfoId String
  year       String?
  title      String?
  teamInfo   String?
  url        String?
  url2       String?
  userinfo   UserInfo @relation(fields: [userInfoId], references: [id], onDelete: Cascade)
}

model Speaking {
  id         String   @id @default(cuid())
  userInfoId String
  year       String?
  title      String?
  city       String?
  url        String?
  url2       String?
  userinfo   UserInfo @relation(fields: [userInfoId], references: [id], onDelete: Cascade)
}

model SideProject {
  id         String   @id @default(cuid())
  userInfoId String
  year       String?
  title      String?
  url        String?
  userinfo   UserInfo @relation(fields: [userInfoId], references: [id], onDelete: Cascade)
}

model Education {
  id         String   @id @default(cuid())
  userInfoId String
  startYear  String?
  endYear    String?
  title      String?
  city       String?
  userinfo   UserInfo @relation(fields: [userInfoId], references: [id], onDelete: Cascade)
}

model Contact {
  id         String   @id @default(cuid())
  userInfoId String
  Threads    String?
  Figma      String?
  Instagram  String?
  Bluesky    String?
  Mastodon   String?
  X          String?
  userinfo   UserInfo @relation(fields: [userInfoId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
